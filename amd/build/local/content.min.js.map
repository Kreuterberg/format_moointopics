{"version":3,"file":"content.min.js","sources":["../../src/local/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     core_courseformat/local/content\n * @class      core_courseformat/local/content\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport { BaseComponent } from \"core/reactive\";\nimport { debounce } from \"core/utils\";\nimport { getCurrentCourseEditor } from \"core_courseformat/courseeditor\";\nimport inplaceeditable from \"core/inplace_editable\";\nimport Section from \"format_moointopics/local/content/section\";\nimport CmItem from \"format_moointopics/local/content/section/cmitem\";\n// Course actions is needed for actions that are not migrated to components.\nimport courseActions from \"core_course/actions\";\nimport DispatchActions from \"format_moointopics/local/content/actions\";\nimport * as CourseEvents from \"core_course/events\";\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\nimport jQuery from \"jquery\";\nimport Pending from \"core/pending\";\nimport log from \"core/log\";\n\nimport CustomMutations from \"format_moointopics/local/courseeditor/custommutations\";\n\n\nexport default class Component extends BaseComponent {\n  /**\n   * Constructor hook.\n   *\n   * @param {Object} descriptor the component descriptor\n   */\n  create(descriptor) {\n    // Optional component name for debugging.\n    this.name = \"course_format\";\n    // Default query selectors.\n    this.selectors = {\n      SECTION: `[data-for='section']`,\n      SECTION_ITEM: `[data-for='section_title']`,\n      SECTION_CMLIST: `[data-for='cmlist']`,\n      COURSE_SECTIONLIST: `[data-for='course_sectionlist']`,\n      CM: `[data-for='cmitem']`,\n      PAGE: `#page`,\n      TOGGLER: `[data-action=\"togglecoursecontentsection\"]`,\n      COLLAPSE: `[data-toggle=\"collapse\"]`,\n      TOGGLEALL: `[data-toggle=\"toggleall\"]`,\n      // Formats can override the activity tag but a default one is needed to create new elements.\n      ACTIVITYTAG: \"li\",\n      SECTIONTAG: \"li\",\n      INDEXNUMBER: `[data-for='index_number']`,\n    };\n    // Default classes to toggle on refresh.\n    this.classes = {\n      COLLAPSED: `collapsed`,\n      // Course content classes.\n      ACTIVITY: `activity`,\n      STATEDREADY: `stateready`,\n      SECTION: `section`,\n    };\n    // Array to save dettached elements during element resorting.\n    this.dettachedCms = {};\n    this.dettachedSections = {};\n    // Index of sections and cms components.\n    this.sections = {};\n    this.cms = {};\n    // The page section return.\n    this.sectionReturn = descriptor.sectionReturn ?? 0;\n    this.debouncedReloads = new Map();\n  }\n\n  /**\n   * Static method to create a component instance form the mustahce template.\n   *\n   * @param {string} target the DOM main element or its ID\n   * @param {object} selectors optional css selector overrides\n   * @param {number} sectionReturn the content section return\n   * @return {Component}\n   */\n  static init(target, selectors, sectionReturn) {\n    return new Component({\n      element: document.getElementById(target),\n      reactive: getCurrentCourseEditor(),\n      selectors,\n      sectionReturn,\n    });\n  }\n\n  /**\n   * Initial state ready method.\n   *\n   * @param {Object} state the state data\n   */\n  stateReady(state) {\n    this._indexContents();\n    // Activate section togglers.\n    this.addEventListener(this.element, \"click\", this._sectionTogglers);\n\n    // Collapse/Expand all sections button.\n    const toogleAll = this.getElement(this.selectors.TOGGLEALL);\n    if (toogleAll) {\n      // Ensure collapse menu button adds aria-controls attribute referring to each collapsible element.\n      const collapseElements = this.getElements(this.selectors.COLLAPSE);\n      const collapseElementIds = [...collapseElements].map(\n        (element) => element.id\n      );\n      toogleAll.setAttribute(\"aria-controls\", collapseElementIds.join(\" \"));\n\n      this.addEventListener(toogleAll, \"click\", this._allSectionToggler);\n      this.addEventListener(toogleAll, \"keydown\", (e) => {\n        // Collapse/expand all sections when Space key is pressed on the toggle button.\n        if (e.key === \" \") {\n          this._allSectionToggler(e);\n        }\n      });\n      this._refreshAllSectionsToggler(state);\n    }\n\n    if (this.reactive.supportComponents) {\n      // Actions are only available in edit mode.\n      if (this.reactive.isEditing) {\n        DispatchActions.addActions({\n            sectionSetChapter: 'sectionSetChapter',\n            sectionUnsetChapter: 'sectionUnsetChapter',\n        });\n        new DispatchActions(this);\n        const mutations = new CustomMutations();\n        this.reactive.addMutations({\n          sectionSetChapter: mutations.sectionSetChapter,\n          sectionUnsetChapter: mutations.sectionUnsetChapter,\n        });\n      }\n\n      // Mark content as state ready.\n      this.element.classList.add(this.classes.STATEDREADY);\n    }\n\n    // Capture completion events.\n    this.addEventListener(\n      this.element,\n      CourseEvents.manualCompletionToggled,\n      this._completionHandler\n    );\n\n    // Capture page scroll to update page item.\n    this.addEventListener(\n      document.querySelector(this.selectors.PAGE),\n      \"scroll\",\n      this._scrollHandler\n    );\n  }\n\n  /**\n   * Setup sections toggler.\n   *\n   * Toggler click is delegated to the main course content element because new sections can\n   * appear at any moment and this way we prevent accidental double bindings.\n   *\n   * @param {Event} event the triggered event\n   */\n  _sectionTogglers(event) {\n    const sectionlink = event.target.closest(this.selectors.TOGGLER);\n    const closestCollapse = event.target.closest(this.selectors.COLLAPSE);\n    // Assume that chevron is the only collapse toggler in a section heading;\n    // I think this is the most efficient way to verify at the moment.\n    const isChevron = closestCollapse?.closest(this.selectors.SECTION_ITEM);\n\n    if (sectionlink || isChevron) {\n      const section = event.target.closest(this.selectors.SECTION);\n      const toggler = section.querySelector(this.selectors.COLLAPSE);\n      const isCollapsed =\n        toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n      if (isChevron || isCollapsed) {\n        // Update the state.\n        const sectionId = section.getAttribute(\"data-id\");\n        this.reactive.dispatch(\n          \"sectionContentCollapsed\",\n          [sectionId],\n          !isCollapsed\n        );\n      }\n    }\n  }\n\n  /**\n   * Handle the collapse/expand all sections button.\n   *\n   * Toggler click is delegated to the main course content element because new sections can\n   * appear at any moment and this way we prevent accidental double bindings.\n   *\n   * @param {Event} event the triggered event\n   */\n  _allSectionToggler(event) {\n    event.preventDefault();\n\n    const target = event.target.closest(this.selectors.TOGGLEALL);\n    const isAllCollapsed = target.classList.contains(this.classes.COLLAPSED);\n\n    const course = this.reactive.get(\"course\");\n    this.reactive.dispatch(\n      \"sectionContentCollapsed\",\n      course.sectionlist ?? [],\n      !isAllCollapsed\n    );\n  }\n\n  /**\n   * Return the component watchers.\n   *\n   * @returns {Array} of watchers\n   */\n  getWatchers() {\n    // Section return is a global page variable but most formats define it just before start printing\n    // the course content. This is the reason why we define this page setting here.\n    this.reactive.sectionReturn = this.sectionReturn;\n\n    // Check if the course format is compatible with reactive components.\n    if (!this.reactive.supportComponents) {\n      return [];\n    }\n    return [\n      // State changes that require to reload some course modules.\n      { watch: `cm.visible:updated`, handler: this._reloadCm },\n      { watch: `cm.stealth:updated`, handler: this._reloadCm },\n      { watch: `cm.indent:updated`, handler: this._reloadCm },\n      // Update section number and title.\n      { watch: `section.number:updated`, handler: this._refreshSectionNumber },\n      // Collapse and expand sections.\n      {\n        watch: `section.contentcollapsed:updated`,\n        handler: this._refreshSectionCollapsed,\n      },\n      // Sections and cm sorting.\n      { watch: `transaction:start`, handler: this._startProcessing },\n      {\n        watch: `course.sectionlist:updated`,\n        handler: this._refreshCourseSectionlist,\n      },\n      //{watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\n      // Section visibility.\n      { watch: `section.visible:updated`, handler: this._reloadSection },\n      {\n        watch: `section.isChapter:updated`,\n        handler: this._updateChapters,\n      },\n      // Reindex sections and cms.\n      { watch: `state:updated`, handler: this._indexContents },\n      // State changes thaty require to reload course modules.\n      { watch: `cm.visible:updated`, handler: this._reloadCm },\n      { watch: `cm.sectionid:updated`, handler: this._reloadCm },\n    ];\n  }\n\n  /**\n   * Update section collapsed state via bootstrap 4 if necessary.\n   *\n   * Formats that do not use bootstrap 4 must override this method in order to keep the section\n   * toggling working.\n   *\n   * @param {object} args\n   * @param {Object} args.state The state data\n   * @param {Object} args.element The element to update\n   */\n  _refreshSectionCollapsed({ state, element }) {\n    const target = this.getElement(this.selectors.SECTION, element.id);\n    if (!target) {\n      throw new Error(`Unknown section with ID ${element.id}`);\n    }\n    // Check if it is already done.\n    const toggler = target.querySelector(this.selectors.COLLAPSE);\n    const isCollapsed =\n      toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n    if (element.contentcollapsed !== isCollapsed) {\n      let collapsibleId =\n        toggler.dataset.target ?? toggler.getAttribute(\"href\");\n      if (!collapsibleId) {\n        return;\n      }\n      collapsibleId = collapsibleId.replace(\"#\", \"\");\n      const collapsible = document.getElementById(collapsibleId);\n      if (!collapsible) {\n        return;\n      }\n\n      // Course index is based on Bootstrap 4 collapsibles. To collapse them we need jQuery to\n      // interact with collapsibles methods. Hopefully, this will change in Bootstrap 5 because\n      // it does not require jQuery anymore (when MDL-71979 is integrated).\n      jQuery(collapsible).collapse(element.contentcollapsed ? \"hide\" : \"show\");\n    }\n\n    this._refreshAllSectionsToggler(state);\n  }\n\n  /**\n   * Refresh the collapse/expand all sections element.\n   *\n   * @param {Object} state The state data\n   */\n  _refreshAllSectionsToggler(state) {\n    const target = this.getElement(this.selectors.TOGGLEALL);\n    if (!target) {\n      return;\n    }\n    // Check if we have all sections collapsed/expanded.\n    let allcollapsed = true;\n    let allexpanded = true;\n    state.section.forEach((section) => {\n      allcollapsed = allcollapsed && section.contentcollapsed;\n      allexpanded = allexpanded && !section.contentcollapsed;\n    });\n    if (allcollapsed) {\n      target.classList.add(this.classes.COLLAPSED);\n      target.setAttribute(\"aria-expanded\", false);\n    }\n    if (allexpanded) {\n      target.classList.remove(this.classes.COLLAPSED);\n      target.setAttribute(\"aria-expanded\", true);\n    }\n  }\n\n  /**\n   * Setup the component to start a transaction.\n   *\n   * Some of the course actions replaces the current DOM element with a new one before updating the\n   * course state. This means the component cannot preload any index properly until the transaction starts.\n   *\n   */\n  _startProcessing() {\n    // During a section or cm sorting, some elements could be dettached from the DOM and we\n    // need to store somewhare in case they are needed later.\n    this.dettachedCms = {};\n    this.dettachedSections = {};\n  }\n\n  /**\n   * Activity manual completion listener.\n   *\n   * @param {Event} event the custom ecent\n   */\n  _completionHandler({ detail }) {\n    if (detail === undefined) {\n      return;\n    }\n    this.reactive.dispatch(\"cmCompletion\", [detail.cmid], detail.completed);\n  }\n\n  /**\n   * Check the current page scroll and update the active element if necessary.\n   */\n  _scrollHandler() {\n    const pageOffset = document.querySelector(this.selectors.PAGE).scrollTop;\n    const items = this.reactive\n      .getExporter()\n      .allItemsArray(this.reactive.state);\n    // Check what is the active element now.\n    let pageItem = null;\n    items.every((item) => {\n      const index = item.type === \"section\" ? this.sections : this.cms;\n      if (index[item.id] === undefined) {\n        return true;\n      }\n\n      const element = index[item.id].element;\n      // Activities without url can only be page items in edit mode.\n      if (item.type === \"cm\" && !item.url && !this.reactive.isEditing) {\n        return pageOffset >= element.offsetTop;\n      }\n      pageItem = item;\n      return pageOffset >= element.offsetTop;\n    });\n    if (pageItem) {\n      this.reactive.dispatch(\"setPageItem\", pageItem.type, pageItem.id);\n    }\n  }\n\n  /**\n   * Update a course section when the section number changes.\n   *\n   * The courseActions module used for most course section tools still depends on css classes and\n   * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\n   * the\n   *\n   * Course formats can override the section title rendering so the frontend depends heavily on backend\n   * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\n   *\n   * @param {Object} param\n   * @param {Object} param.element details the update details.\n   */\n  _refreshSectionNumber({state, element }) {\n    // Find the element.\n    const target = this.getElement(this.selectors.SECTION, element.id);\n    if (!target) {\n      // Job done. Nothing to refresh.\n      return;\n    }\n    // Update section numbers in all data, css and YUI attributes.\n    target.id = `section-${element.number}`;\n    // YUI uses section number as section id in data-sectionid, in principle if a format use components\n    // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\n    // use it for legacy purposes.\n    target.dataset.sectionid = element.number;\n    // The data-number is the attribute used by components to store the section number.\n    target.dataset.number = element.number;\n    this._reloadSectionNames({ state: state, element: element });\n    // Update title and title inplace editable, if any.\n    const inplace = inplaceeditable.getInplaceEditable(\n      target.querySelector(this.selectors.SECTION_ITEM)\n    );\n    if (inplace) {\n      // The course content HTML can be modified at any moment, so the function need to do some checkings\n      // to make sure the inplace editable still represents the same itemid.\n      const currentvalue = inplace.getValue();\n      const currentitemid = inplace.getItemId();\n      // Unnamed sections must be recalculated.\n      if (inplace.getValue() === \"\") {\n        // The value to send can be an empty value if it is a default name.\n        if (\n          currentitemid == element.id &&\n          (currentvalue != element.rawtitle || element.rawtitle == \"\")\n        ) {\n          inplace.setValue(element.rawtitle);\n        }\n      }\n    }\n  }\n\n  /**\n   * Refresh a section cm list.\n   *\n   * @param {Object} param\n   * @param {Object} param.element details the update details.\n   */\n  _refreshSectionCmlist({ element }) {\n    const cmlist = element.cmlist ?? [];\n    const section = this.getElement(this.selectors.SECTION, element.id);\n    const listparent = section?.querySelector(this.selectors.SECTION_CMLIST);\n    // A method to create a fake element to be replaced when the item is ready.\n    const createCm = this._createCmItem.bind(this);\n    if (listparent) {\n      this._fixOrder(\n        listparent,\n        cmlist,\n        this.selectors.CM,\n        this.dettachedCms,\n        createCm\n      );\n    }\n  }\n\n  /**\n   * Refresh the section list.\n   *\n   * @param {Object} param\n   * @param {Object} param.element details the update details.\n   */\n  _refreshCourseSectionlist({ element }) {\n    // If we have a section return means we only show a single section so no need to fix order.\n    if (this.reactive.sectionReturn != 0) {\n      return;\n    }\n    const sectionlist = element.sectionlist ?? [];\n    const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\n    // For now section cannot be created at a frontend level.\n    const createSection = this._createSectionItem.bind(this);\n    if (listparent) {\n      this._fixOrder(\n        listparent,\n        sectionlist,\n        this.selectors.SECTION,\n        this.dettachedSections,\n        createSection\n      );\n    }\n  }\n\n  /**\n   * Regenerate content indexes.\n   *\n   * This method is used when a legacy action refresh some content element.\n   */\n  _indexContents() {\n    // Find unindexed sections.\n    this._scanIndex(this.selectors.SECTION, this.sections, (item) => {\n      return new Section(item);\n    });\n\n    // Find unindexed cms.\n    this._scanIndex(this.selectors.CM, this.cms, (item) => {\n      return new CmItem(item);\n    });\n  }\n\n  /**\n   * Reindex a content (section or cm) of the course content.\n   *\n   * This method is used internally by _indexContents.\n   *\n   * @param {string} selector the DOM selector to scan\n   * @param {*} index the index attribute to update\n   * @param {*} creationhandler method to create a new indexed element\n   */\n  _scanIndex(selector, index, creationhandler) {\n    const items = this.getElements(`${selector}:not([data-indexed])`);\n    items.forEach((item) => {\n      if (!item?.dataset?.id) {\n        return;\n      }\n      // Delete previous item component.\n      if (index[item.dataset.id] !== undefined) {\n        index[item.dataset.id].unregister();\n      }\n      // Create the new component.\n      index[item.dataset.id] = creationhandler({\n        ...this,\n        element: item,\n      });\n      // Mark as indexed.\n      item.dataset.indexed = true;\n    });\n  }\n\n  /**\n   * Reload a course module contents.\n   *\n   * Most course module HTML is still strongly backend dependant.\n   * Some changes require to get a new version of the module.\n   *\n   * @param {object} param0 the watcher details\n   * @param {object} param0.element the state object\n   */\n  _reloadCm({ element }) {\n    if (!this.getElement(this.selectors.CM, element.id)) {\n      return;\n    }\n    const debouncedReload = this._getDebouncedReloadCm(element.id);\n    debouncedReload();\n  }\n\n  /**\n   * Generate or get a reload CM debounced function.\n   * @param {Number} cmId\n   * @returns {Function} the debounced reload function\n   */\n  _getDebouncedReloadCm(cmId) {\n    const pendingKey = `courseformat/content:reloadCm_${cmId}`;\n    let debouncedReload = this.debouncedReloads.get(pendingKey);\n    if (debouncedReload) {\n      return debouncedReload;\n    }\n    const reload = () => {\n      const pendingReload = new Pending(pendingKey);\n      this.debouncedReloads.delete(pendingKey);\n      const cmitem = this.getElement(this.selectors.CM, cmId);\n      if (!cmitem) {\n        return pendingReload.resolve();\n      }\n      const promise = courseActions.refreshModule(cmitem, cmId);\n      promise\n        .then(() => {\n          this._indexContents();\n          return true;\n        })\n        .catch((error) => {\n          log.debug(error);\n        })\n        .finally(() => {\n          pendingReload.resolve();\n        });\n      return pendingReload;\n    };\n    debouncedReload = debounce(reload, 200, {\n      cancel: true,\n      pending: true,\n    });\n    this.debouncedReloads.set(pendingKey, debouncedReload);\n    return debouncedReload;\n  }\n\n  /**\n   * Cancel the active reload CM debounced function, if any.\n   * @param {Number} cmId\n   */\n  _cancelDebouncedReloadCm(cmId) {\n    const pendingKey = `courseformat/content:reloadCm_${cmId}`;\n    const debouncedReload = this.debouncedReloads.get(pendingKey);\n    if (!debouncedReload) {\n      return;\n    }\n    debouncedReload.cancel();\n    this.debouncedReloads.delete(pendingKey);\n  }\n\n  /**\n   * Reload a course section contents.\n   *\n   * Section HTML is still strongly backend dependant.\n   * Some changes require to get a new version of the section.\n   *\n   * @param {details} param0 the watcher details\n   * @param {object} param0.element the state object\n   */\n  _reloadSection({ element }) {\n    const pendingReload = new Pending(\n      `courseformat/content:reloadSection_${element.id}`\n    );\n    const sectionitem = this.getElement(this.selectors.SECTION, element.id);\n    if (sectionitem) {\n      // Cancel any pending reload because the section will reload cms too.\n      for (const cmId of element.cmlist) {\n        this._cancelDebouncedReloadCm(cmId);\n      }\n      const promise = courseActions.refreshSection(sectionitem, element.id);\n      promise\n        .then(() => {\n          this._indexContents();\n          return true;\n        })\n        .catch((error) => {\n          log.debug(error);\n        })\n        .finally(() => {\n          pendingReload.resolve();\n        });\n    }\n  }\n\n  _reloadSectionNames({state, element}) {\n    state.section.forEach(section => {\n      if (section.number >= element.number) {\n        \n        const number = this.getElement(this.selectors.INDEXNUMBER, section.id);\n        if (section.isChapter) {\n          number.innerHTML = section.isChapter;\n        } else {\n          number.innerHTML = section.parentChapter + \".\" + section.innerChapterNumber;\n        }\n        //window.console.log(number);\n      }\n    });\n  }\n\n  _updateChapters({state, element}) {\n    this._reloadSection({element});\n    state.section.forEach(section => {\n      if (section.number >= element.number) {\n        \n        const number = this.getElement(this.selectors.INDEXNUMBER, section.id);\n        if (section.isChapter) {\n          number.innerHTML = section.isChapter;\n        } else {\n          number.innerHTML = section.parentChapter + \".\" + section.innerChapterNumber;\n        }\n        //window.console.log(number);\n      }\n    });\n  }\n\n\n  //_reloadSectionNames({state, element}) {\n    // this._reloadSection({element});\n    // state.section.forEach(section => {\n    //   if (section.number > element.number) {\n    //     this._reloadSection({element: section});\n    //   }\n    // });\n    // const elements = this.getElements(this.selectors.INDEXNUMBER);\n    // elements.forEach(element => {\n    //   element.innerHTML = \"&nbsp3000:&nbsp\";\n    // });\n  //}\n\n  /**\n   * Create a new course module item in a section.\n   *\n   * Thos method will append a fake item in the container and trigger an ajax request to\n   * replace the fake element by the real content.\n   *\n   * @param {Element} container the container element (section)\n   * @param {Number} cmid the course-module ID\n   * @returns {Element} the created element\n   */\n  _createCmItem(container, cmid) {\n    const newItem = document.createElement(this.selectors.ACTIVITYTAG);\n    newItem.dataset.for = \"cmitem\";\n    newItem.dataset.id = cmid;\n    // The legacy actions.js requires a specific ID and class to refresh the CM.\n    newItem.id = `module-${cmid}`;\n    newItem.classList.add(this.classes.ACTIVITY);\n    container.append(newItem);\n    this._reloadCm({\n      element: this.reactive.get(\"cm\", cmid),\n    });\n    return newItem;\n  }\n\n  /**\n   * Create a new section item.\n   *\n   * This method will append a fake item in the container and trigger an ajax request to\n   * replace the fake element by the real content.\n   *\n   * @param {Element} container the container element (section)\n   * @param {Number} sectionid the course-module ID\n   * @returns {Element} the created element\n   */\n  _createSectionItem(container, sectionid) {\n    const section = this.reactive.get(\"section\", sectionid);\n    const newItem = document.createElement(this.selectors.SECTIONTAG);\n    newItem.dataset.for = \"section\";\n    newItem.dataset.id = sectionid;\n    newItem.dataset.number = section.number;\n    // The legacy actions.js requires a specific ID and class to refresh the section.\n    newItem.id = `section-${sectionid}`;\n    newItem.classList.add(this.classes.SECTION);\n    container.append(newItem);\n    this._reloadSection({\n      element: section,\n    });\n    return newItem;\n  }\n\n  /**\n   * Fix/reorder the section or cms order.\n   *\n   * @param {Element} container the HTML element to reorder.\n   * @param {Array} neworder an array with the ids order\n   * @param {string} selector the element selector\n   * @param {Object} dettachedelements a list of dettached elements\n   * @param {function} createMethod method to create missing elements\n   */\n  async _fixOrder(\n    container,\n    neworder,\n    selector,\n    dettachedelements,\n    createMethod\n  ) {\n    if (container === undefined) {\n      return;\n    }\n\n    // Empty lists should not be visible.\n    if (!neworder.length) {\n      container.classList.add(\"hidden\");\n      container.innerHTML = \"\";\n      return;\n    }\n\n    // Grant the list is visible (in case it was empty).\n    container.classList.remove(\"hidden\");\n\n    // Move the elements in order at the beginning of the list.\n    neworder.forEach((itemid, index) => {\n      let item =\n        this.getElement(selector, itemid) ??\n        dettachedelements[itemid] ??\n        createMethod(container, itemid);\n      if (item === undefined) {\n        // Missing elements cannot be sorted.\n        return;\n      }\n      // Get the current elemnt at that position.\n      const currentitem = container.children[index];\n      if (currentitem === undefined) {\n        container.append(item);\n        return;\n      }\n      if (currentitem !== item) {\n        container.insertBefore(item, currentitem);\n      }\n    });\n\n    // Dndupload add a fake element we need to keep.\n    let dndFakeActivity;\n\n    // Remove the remaining elements.\n    while (container.children.length > neworder.length) {\n      const lastchild = container.lastChild;\n      if (lastchild?.classList?.contains(\"dndupload-preview\")) {\n        dndFakeActivity = lastchild;\n      } else {\n        dettachedelements[lastchild?.dataset?.id ?? 0] = lastchild;\n      }\n      container.removeChild(lastchild);\n    }\n    // Restore dndupload fake element.\n    if (dndFakeActivity) {\n      container.append(dndFakeActivity);\n    }\n  }\n}\n"],"names":["Component","BaseComponent","create","descriptor","name","selectors","SECTION","SECTION_ITEM","SECTION_CMLIST","COURSE_SECTIONLIST","CM","PAGE","TOGGLER","COLLAPSE","TOGGLEALL","ACTIVITYTAG","SECTIONTAG","INDEXNUMBER","classes","COLLAPSED","ACTIVITY","STATEDREADY","dettachedCms","dettachedSections","sections","cms","sectionReturn","debouncedReloads","Map","target","element","document","getElementById","reactive","stateReady","state","_indexContents","addEventListener","this","_sectionTogglers","toogleAll","getElement","collapseElementIds","getElements","map","id","setAttribute","join","_allSectionToggler","e","key","_refreshAllSectionsToggler","supportComponents","isEditing","addActions","sectionSetChapter","sectionUnsetChapter","DispatchActions","mutations","CustomMutations","addMutations","classList","add","CourseEvents","manualCompletionToggled","_completionHandler","querySelector","_scrollHandler","event","sectionlink","closest","closestCollapse","isChevron","section","toggler","isCollapsed","contains","sectionId","getAttribute","dispatch","preventDefault","isAllCollapsed","course","get","sectionlist","getWatchers","watch","handler","_reloadCm","_refreshSectionNumber","_refreshSectionCollapsed","_startProcessing","_refreshCourseSectionlist","_reloadSection","_updateChapters","Error","contentcollapsed","collapsibleId","dataset","replace","collapsible","collapse","allcollapsed","allexpanded","forEach","remove","detail","undefined","cmid","completed","pageOffset","scrollTop","items","getExporter","allItemsArray","pageItem","every","item","index","type","url","offsetTop","number","sectionid","_reloadSectionNames","inplace","inplaceeditable","getInplaceEditable","currentvalue","getValue","currentitemid","getItemId","rawtitle","setValue","_refreshSectionCmlist","cmlist","listparent","createCm","_createCmItem","bind","_fixOrder","createSection","_createSectionItem","_scanIndex","Section","CmItem","selector","creationhandler","_item$dataset","unregister","indexed","_getDebouncedReloadCm","debouncedReload","cmId","pendingKey","pendingReload","Pending","delete","cmitem","resolve","courseActions","refreshModule","then","catch","error","debug","finally","cancel","pending","set","_cancelDebouncedReloadCm","sectionitem","refreshSection","isChapter","innerHTML","parentChapter","innerChapterNumber","container","newItem","createElement","for","append","neworder","dettachedelements","createMethod","length","dndFakeActivity","itemid","currentitem","children","insertBefore","lastchild","lastChild","_lastchild$classList","_lastchild$dataset","removeChild"],"mappings":"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"}