{"version":3,"file":"custommutations.min.js","sources":["../../../src/local/courseeditor/custommutations.js"],"sourcesContent":["import ajax from 'core/ajax';\n\nexport default class {\n    \n\n    async completeSection(stateManager, target) {\n        const course = stateManager.get('course');\n        let ids = [];\n        ids.push(target.dataset.id);\n        const args = {\n            action: 'complete_section',\n            courseid: course.id,\n            ids: ids,\n            targetsectionid: target.dataset.id,\n        };\n        let updates = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        stateManager.processUpdates(JSON.parse(updates));\n    }\n\n    async updateSectionprogress(stateManager, sectionId) {\n        window.console.log(\"MUSTATION WIRD AUSGEFÃœHRT\");\n        const course = stateManager.get('course');\n        let ids = [];\n        ids.push(sectionId);\n        const args = {\n            action: 'update_sectionprogress',\n            courseid: course.id,\n            ids: ids,\n            targetsectionid: sectionId,\n        };\n        let updates = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        stateManager.processUpdates(JSON.parse(updates));\n    }\n\n    async sectionSetChapter(stateManager, target) {\n        const course = stateManager.get('course');\n        let ids = [];\n        const targetSection = stateManager.state.section.get(target.dataset.id);\n        stateManager.state.section.forEach(section => {\n            if (section.number >= targetSection.number) {\n                ids.push(section.id);\n            }\n        });\n        \n        \n        const args = {\n            action: 'section_setChapter',\n            courseid: course.id,\n            ids: ids,\n            targetsectionid: target.dataset.id,\n        };\n        let updates = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        stateManager.processUpdates(JSON.parse(updates));\n        \n    }\n    async sectionUnsetChapter(stateManager, target) {\n        const course = stateManager.get('course');\n        let ids = [];\n        const targetSection = stateManager.state.section.get(target.dataset.id);\n        stateManager.state.section.forEach(section => {\n            if (section.number >= targetSection.number) {\n                ids.push(section.id);\n            }\n        });\n        \n        const args = {\n            action: 'section_unsetChapter',\n            courseid: course.id,\n            ids: ids,\n            targetsectionid: target.dataset.id,\n        };\n        let updates = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        stateManager.processUpdates(JSON.parse(updates));\n        \n    }\n\n    async setLastSectionModal(stateManager, id) {\n        const course = stateManager.get('course');\n        let ids = [];\n        ids.push(id);\n        const args = {\n            action: 'set_last_section_modal',\n            courseid: course.id,\n            ids: ids,\n            targetsectionid: id,\n        };\n        let updates = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        stateManager.processUpdates(JSON.parse(updates));\n    }\n\n    setContinueSection(stateManager, type, id) {\n        stateManager.setReadOnly(false);\n        const state = stateManager.state;\n        const course = state.course;\n        course.continueSection = id;\n        state.section.forEach((section) => {\n            //section.containsActiveSection = false;\n            //section.isActiveSection = false;\n            if (section.id == id) {\n                section.isActiveSection = true;\n            }\n            \n            if (section.parentChapter == state.section.get(id).parentChapter) {\n                section.containsActiveSection = true;\n                \n            }\n        });\n        state.section.get(id).isActiveSection = true;\n        \n        stateManager.setReadOnly(true);\n    }\n\n    async getContinueSection(stateManager, target) {\n        const state = stateManager.state;\n        const course = state.course;\n        const args = {\n            action: 'getContinuesection',\n            courseid: course.id,\n        };\n        let updates = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        stateManager.processUpdates(JSON.parse(updates));\n    }\n\n    async readAllForumDiscussions(stateManager, forumid) {\n        const state = stateManager.state;\n        const course = state.course;\n        let ids = [];\n        ids.push(forumid);\n        const args = {\n            action: 'readAllForumDiscussions',\n            courseid: course.id,\n            ids: ids,\n        }\n        let updates = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        stateManager.processUpdates(JSON.parse(updates));\n    }\n}"],"names":["stateManager","target","course","get","ids","push","dataset","id","args","action","courseid","targetsectionid","updates","ajax","call","methodname","processUpdates","JSON","parse","sectionId","window","console","log","targetSection","state","section","forEach","number","setContinueSection","type","setReadOnly","continueSection","isActiveSection","parentChapter","containsActiveSection","forumid"],"mappings":"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"}