{"version":3,"file":"custommutations.min.js","sources":["../../../src/local/courseeditor/custommutations.js"],"sourcesContent":["import ajax from 'core/ajax';\nexport default class {\n\n    async completeSection(stateManager, target) {\n        const course = stateManager.get('course');\n        let ids = [];\n        ids.push(target.dataset.id);\n        const args = {\n            action: 'complete_section',\n            courseid: course.id,\n            ids: ids,\n            targetsectionid: target.dataset.id,\n        };\n        let updates = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        stateManager.processUpdates(JSON.parse(updates));\n    }\n\n    async sectionSetChapter(stateManager, target) {\n        const course = stateManager.get('course');\n        let ids = [];\n        const targetSection = stateManager.state.section.get(target.dataset.id);\n        stateManager.state.section.forEach(section => {\n            if (section.number >= targetSection.number) {\n                ids.push(section.id);\n            }\n        });\n        const args = {\n            action: 'section_setChapter',\n            courseid: course.id,\n            ids: ids,\n            targetsectionid: target.dataset.id,\n        };\n        let updates = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        stateManager.processUpdates(JSON.parse(updates));\n    }\n    async sectionUnsetChapter(stateManager, target) {\n        const course = stateManager.get('course');\n        let ids = [];\n        const targetSection = stateManager.state.section.get(target.dataset.id);\n        stateManager.state.section.forEach(section => {\n            if (section.number >= targetSection.number) {\n                ids.push(section.id);\n            }\n        });\n        const args = {\n            action: 'section_unsetChapter',\n            courseid: course.id,\n            ids: ids,\n            targetsectionid: target.dataset.id,\n        };\n        let updates = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        stateManager.processUpdates(JSON.parse(updates));\n    }\n}"],"names":["stateManager","target","course","get","ids","push","dataset","id","args","action","courseid","targetsectionid","updates","ajax","call","methodname","processUpdates","JSON","parse","targetSection","state","section","forEach","number"],"mappings":"iTAG0BA,aAAcC,cAC1BC,OAASF,aAAaG,IAAI,cAC5BC,IAAM,GACVA,IAAIC,KAAKJ,OAAOK,QAAQC,UAClBC,KAAO,CACTC,OAAQ,mBACRC,SAAUR,OAAOK,GACjBH,IAAKA,IACLO,gBAAiBV,OAAOK,QAAQC,QAEhCK,cAAgBC,cAAKC,KAAK,CAAC,CAC3BC,WAAY,kCACZP,KAAAA,QACA,GACJR,aAAagB,eAAeC,KAAKC,MAAMN,kCAGnBZ,aAAcC,cAC5BC,OAASF,aAAaG,IAAI,cAC5BC,IAAM,SACJe,cAAgBnB,aAAaoB,MAAMC,QAAQlB,IAAIF,OAAOK,QAAQC,IACpEP,aAAaoB,MAAMC,QAAQC,SAAQD,UAC3BA,QAAQE,QAAUJ,cAAcI,QAChCnB,IAAIC,KAAKgB,QAAQd,aAGnBC,KAAO,CACTC,OAAQ,qBACRC,SAAUR,OAAOK,GACjBH,IAAKA,IACLO,gBAAiBV,OAAOK,QAAQC,QAEhCK,cAAgBC,cAAKC,KAAK,CAAC,CAC3BC,WAAY,kCACZP,KAAAA,QACA,GACJR,aAAagB,eAAeC,KAAKC,MAAMN,oCAEjBZ,aAAcC,cAC9BC,OAASF,aAAaG,IAAI,cAC5BC,IAAM,SACJe,cAAgBnB,aAAaoB,MAAMC,QAAQlB,IAAIF,OAAOK,QAAQC,IACpEP,aAAaoB,MAAMC,QAAQC,SAAQD,UAC3BA,QAAQE,QAAUJ,cAAcI,QAChCnB,IAAIC,KAAKgB,QAAQd,aAGnBC,KAAO,CACTC,OAAQ,uBACRC,SAAUR,OAAOK,GACjBH,IAAKA,IACLO,gBAAiBV,OAAOK,QAAQC,QAEhCK,cAAgBC,cAAKC,KAAK,CAAC,CAC3BC,WAAY,kCACZP,KAAAA,QACA,GACJR,aAAagB,eAAeC,KAAKC,MAAMN"}